pipeline {
    // Define que pode rodar em qualquer agente/m√°quina dispon√≠vel
    agent any
    
    // Vari√°veis de ambiente globais - dispon√≠veis em todos os stages
    environment {
        IMAGE_NAME = "minha-automacao-python"  // Nome da imagem Docker que ser√° criada
        IMAGE_TAG = "${BUILD_NUMBER}"          // Tag usando n√∫mero do build (1, 2, 3...)
    }
    
    // Sequ√™ncia de etapas que ser√£o executadas
    stages {
        
        // STAGE 1: Baixar c√≥digo do GitHub
        stage('üîÑ Checkout') {
            steps {
                echo 'üì• Puxando c√≥digo do GitHub...'
                // Comando que baixa o c√≥digo do reposit√≥rio configurado no job
                checkout scm  // SCM = Source Control Management (Git)
            }
        }
        
        // STAGE 2: Analisar o projeto baixado
        stage('üîç Verificar Projeto') {
            steps {
                echo 'üìã Verificando arquivos da automa√ß√£o...'
                // Lista todos os arquivos baixados do GitHub
                sh 'ls -la'
                
                // Bloco de c√≥digo Groovy para l√≥gica mais complexa
                script {
                    // Verifica se existe arquivo de depend√™ncias Python
                    if (fileExists('requirements.txt')) {
                        echo '‚úÖ requirements.txt encontrado'
                        sh 'cat requirements.txt'  // Mostra conte√∫do do arquivo
                    } else {
                        echo '‚ö†Ô∏è requirements.txt n√£o encontrado'
                    }
                    
                    // Procura pelo arquivo principal Python
                    if (fileExists('main.py')) {
                        echo '‚úÖ main.py encontrado'
                    } else if (fileExists('app.py')) {
                        echo '‚úÖ app.py encontrado'
                    } else {
                        echo 'üìã Arquivos Python encontrados:'
                        // Busca todos arquivos .py na pasta
                        sh 'find . -name "*.py" | head -5'
                    }
                }
            }
        }
        
        // STAGE 3: Criar arquivo para containerizar a aplica√ß√£o
        stage('üê≥ Criar Dockerfile para Automa√ß√£o') {
            steps {
                echo 'üìÑ Criando Dockerfile para automa√ß√£o...'
                script {
                    // S√≥ cria Dockerfile se n√£o existir um
                    if (!fileExists('Dockerfile')) {
                        echo 'üèóÔ∏è Criando Dockerfile para automa√ß√£o Python...'
                        
                        // Cria arquivo Dockerfile com conte√∫do espec√≠fico para Python
                        writeFile file: 'Dockerfile', text: '''FROM python:3.11-slim

# Instalar depend√™ncias do sistema se necess√°rio (curl, wget, etc)
RUN apt-get update && apt-get install -y \\
    curl \\
    wget \\
    && rm -rf /var/lib/apt/lists/*

# Diret√≥rio de trabalho dentro do container
WORKDIR /app

# Copiar requirements primeiro (aproveitamento de cache do Docker)
COPY requirements.txt* ./

# Instalar depend√™ncias Python ou ignora se n√£o tiver requirements.txt
RUN pip install --no-cache-dir -r requirements.txt || echo "Sem requirements.txt"

# Copiar todo o c√≥digo do projeto
COPY . .

# Comando que ser√° executado quando container iniciar
CMD ["python", "main.py"]'''
                        
                        echo '‚úÖ Dockerfile criado para automa√ß√£o'
                    } else {
                        echo '‚úÖ Usando Dockerfile existente'
                    }
                }
            }
        }
        
        // STAGE 4: Construir a imagem Docker
        stage('üèóÔ∏è Build da Imagem') {
            steps {
                echo 'üî® Construindo imagem da automa√ß√£o...'
                sh """
                    # Constr√≥i imagem Docker usando o Dockerfile criado
                    docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                    
                    # Cria tag "latest" para sempre ter vers√£o mais recente
                    docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
                    
                    echo "‚úÖ Imagem constru√≠da: ${IMAGE_NAME}:${IMAGE_TAG}"
                """
            }
        }
        
        // STAGE 5: Testar se a imagem foi criada corretamente
        stage('üß™ Teste da Automa√ß√£o') {
            steps {
                echo 'üß™ Testando se automa√ß√£o executa...'
                sh """
                    echo "=== Testando automa√ß√£o ==="
                    # Roda container tempor√°rio s√≥ para testar Python
                    docker run --rm ${IMAGE_NAME}:latest python --version
                    echo "‚úÖ Python est√° funcionando no container!"
                """
            }
        }
        
        // STAGE 6: Executar a automa√ß√£o de verdade
        stage('üöÄ Executar Automa√ß√£o') {
            steps {
                echo 'ü§ñ Executando automa√ß√£o Python...'
                script {
                    sh """
                        echo "=== Executando automa√ß√£o ==="
                        
                        # Executa a automa√ß√£o Python
                        # --rm: remove container quando terminar
                        # --name: nome do container enquanto roda
                        # -v: compartilha pasta output (se sua automa√ß√£o gerar arquivos)
                        docker run --rm \\
                            --name ${IMAGE_NAME}-executando \\
                            -v \$(pwd)/output:/app/output \\
                            ${IMAGE_NAME}:latest
                        
                        echo "‚úÖ Automa√ß√£o executada!"
                    """
                }
            }
        }
        
        // STAGE 7: Verificar se tudo deu certo
        stage('üìÑ Verificar Resultados') {
            steps {
                echo 'üìã Verificando resultados da automa√ß√£o...'
                sh '''
                    echo "=== Arquivos gerados ==="
                    # Verifica se automa√ß√£o gerou arquivos na pasta output
                    ls -la output/ || echo "Pasta output n√£o existe"
                    
                    echo "=== Logs da execu√ß√£o ==="
                    echo "Automa√ß√£o Python executada com sucesso!"
                '''
            }
        }
    }
    
    // A√ß√µes que sempre executam (sucesso ou falha)
    post {
        // SEMPRE executa (mesmo se der erro)
        always {
            echo 'üßπ Limpeza...'
            sh '''
                # Remove imagens Docker antigas para n√£o lotar espa√ßo
                # Mant√©m as 2 vers√µes mais recentes apenas
                docker images ${IMAGE_NAME} --format "{{.Tag}}" | grep -v latest | tail -n +3 | xargs -r -I {} docker rmi ${IMAGE_NAME}:{} || true
            '''
        }
        
        // S√≥ executa se TUDO deu certo
        success {
            echo 'üéâ SUCESSO! Automa√ß√£o executada!'
            echo 'üìä A automa√ß√£o Python rodou dentro do container'
            echo 'üìÅ Verifique pasta output/ para arquivos gerados'
        }
        
        // S√≥ executa se deu ERRO
        failure {
            echo '‚ùå Automa√ß√£o falhou!'
            echo 'üîç Verifique os logs acima para debug'
        }
    }
}